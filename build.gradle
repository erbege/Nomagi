buildscript {
    repositories {
        mavenCentral()
        maven { url = 'http://files.minecraftforge.net/maven' }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.9'
    id 'net.minecraftforge.gradle.forge'
    id 'maven-publish'
}

configurations {
    shade
    compile.extendsFrom shade
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def buildVersion = System.getenv('BUILD_NUMBER') ?: 'CUSTOM'
def userName = project.findProperty('devUsername') ?: modName

archivesBaseName = modName
group = modGroup
version = "${mcVersion}-${modVersion}-${buildVersion}"

tasks.build.dependsOn sourceJar

minecraft {
    version = "${mcVersion}-${mcfVersion}"
    runDir = 'run'
    replaceIn 'Nomagi.java'
    replace '@VERSION@', project.version
    clientRunArgs += "--username=${userName}"
    mappings = project.mcpMappings
}

repositories {
    maven { name 'tehnut';   url 'http://tehnut.info/maven' }
    maven { name 'tterrag';  url 'http://maven.tterrag.com' }
    maven { name 'progwm16'; url 'http://dvs1.progwml6.com/files/maven' }
}

dependencies {
    shade        "tehnut.lib:LendingLibrary:${llibVersion}"
    deobfCompile "info.amerifrance.guideapi:Guide-API:${gapiVersion}"
    deobfCompile "mcp.mobius.waila:Hwyla:${hwylaVersion}"
    deobfCompile "mezz.jei:jei_${jeiVersion}"
    deobfCompile "team.chisel.ctm:CTM:${ctmVersion}"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info', '**/*.properties', 'pack.mcmeta'
        expand  'version':   project.version,
                'mcversion': minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info', '**/*.properties', 'pack.mcmeta'
    }
}

reobf {
    jar { extraLines 'PK: tehnut/lib info/sleeplessacorn/nomagi/lib' }
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Built-on": minecraft.version
    )
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
        }
    }
    repositories {
        if (project.hasProperty('mavenRepo')) {
            maven { url project.mavenRepo }
        } else {
            mavenLocal()
        }
    }
}

curseforge {
    apiKey = project.findProperty('curseKeyTehNut') ?: ''
    project {
        id = project.curseId
        changelog = getChangelogText()
        releaseType = 'beta'
        addArtifact sourceJar
    }
}

static String getChangelogText() {
    def changelog = new File('changelog.txt')
    String entry = '', separator = '---'
    if (changelog.exists()) {
        int lineCount = 0
        boolean done = false
        changelog.eachLine {
            if (done || it == null) {
                return
            }
            if (lineCount < 3) {
                lineCount++
                if (it.startsWith(separator)) {
                    return
                }
            }
            if (!it.startsWith(separator)) {
                entry += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
                return
            }
            done = true // once we go past the first version block, parse no more
        }
    }
    return entry
}

